// Updated Prisma schema with Analytics support
// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==================================
// CORE MODELS
// ==================================

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String?
  plan      Plan     @default(FREE) // User-level plan
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  sites     Site[]
  
  @@map("users")
}

model Site {
  id          String   @id @default(uuid())
  name        String
  domain      String
  userId      String
  settings    Json     @default("{}") // Widget design settings
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  reviews     Review[]
  widgetViews WidgetView[]
  
  @@map("sites")
}

model Review {
  id          String       @id @default(uuid())
  siteId      String
  authorName  String
  authorEmail String?
  rating      Int          // 1-5
  comment     String
  status      ReviewStatus @default(PENDING)
  ipAddress   String?
  userAgent   String?
  country     String?      // For analytics
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  
  // Relations
  site        Site         @relation(fields: [siteId], references: [id], onDelete: Cascade)
  
  // Indexes for performance
  @@index([siteId, status, createdAt])
  @@index([ipAddress, createdAt]) // For anti-spam
  @@map("reviews")
}

// ==================================
// ANALYTICS MODELS
// ==================================

model WidgetView {
  id        String   @id @default(uuid())
  siteId    String
  ipAddress String?
  userAgent String?
  referrer  String?
  country   String?
  createdAt DateTime @default(now())
  
  // Relations
  site      Site     @relation(fields: [siteId], references: [id], onDelete: Cascade)
  
  // Indexes for analytics queries
  @@index([siteId, createdAt])
  @@index([ipAddress, createdAt])
  @@map("widget_views")
}

// Email notification tracking
model NotificationLog {
  id         String            @id @default(uuid())
  userId     String
  type       NotificationType
  status     NotificationStatus @default(PENDING)
  data       Json?             // Email content, recipient, etc.
  sentAt     DateTime?
  error      String?
  createdAt  DateTime          @default(now())
  
  @@index([userId, type, createdAt])
  @@map("notification_logs")
}

// ==================================
// ENUMS
// ==================================

enum Plan {
  FREE
  PREMIUM
}

enum ReviewStatus {
  PENDING
  APPROVED
  HIDDEN
  DELETED
}

enum NotificationType {
  NEW_REVIEW         // Instant notification about new review
  WEEKLY_DIGEST      // Weekly summary for FREE users
  MONTHLY_REPORT     // Monthly analytics report
  PLAN_LIMIT_WARNING // When approaching plan limits
}

enum NotificationStatus {
  PENDING
  SENT
  FAILED
  CANCELLED
}